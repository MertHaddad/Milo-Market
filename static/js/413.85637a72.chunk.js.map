{"version":3,"file":"static/js/413.85637a72.chunk.js","mappings":"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","sources":["components/options/brandFilter.jsx","components/options/tagFilter.jsx","components/options/sort.jsx","components/options/options.jsx"],"sourcesContent":["import React, { useState, useTransition } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { selectQueries, setQuery } from \"../../features/querySlice\";\nimport { getItems } from \"../../features/productSlice\";\nimport { getStockByTags } from \"../../features/allProductsSlice\";\nimport { getFilteredItemsNumber } from \"../../features/filteredProducts\";\nimport useDidMountEffect from \"../../helpers/useDidMountEffect\";\nimport Spinner from \"../main/spinner\";\n\nconst BrandFilter = () => {\n  const [search, setSearch] = useState(\"\");\n  const [searchResults, setSearchResults] = useState([]);\n  const [selected, setSelected] = useState([\"All\"]);\n  const querySelector = useSelector((state) => state.query.value);\n  const selectBrand = useSelector((state) => state.allProducts.stockByBrand);\n  const productsNumberSelector = useSelector((state) => state.filteredProducts);\n  // const itemsSelector = useSelector((state) => state.product);\n  const [showSpinner, setShowSpinner] = useState(false);\n  const selectQuery = useSelector((state) => state.query.value);\n  const dispatch = useDispatch();\n\n  const [isPending, startTransition] = useTransition();\n\n  useDidMountEffect(() => {\n    let res = selectBrand.filter((brand) =>\n      brand.brand.name.toLocaleLowerCase().includes(search.toLocaleLowerCase())\n    );\n    setSearchResults(res);\n  }, [search]);\n\n  const handleChange = (e) => {\n\n    startTransition(() => {\n      if (e.target.name === \"All\") {\n        setSelected(\n          selected.includes(\"All\")\n            ? selected.filter((item) => item !== \"All\")\n            : [\"All\"]\n        );\n      } else {\n        let filtered = selected;\n        if (selected.includes(\"All\")) {\n          filtered = selected.filter((item) => item !== \"All\");\n        }\n\n        setSelected(\n          filtered.includes(e.target.id) || selectQuery.includes(\"manufacturer=\"+e.target.id)\n            ? filtered.filter((item) => item !== e.target.id)\n            : [...filtered, e.target.id]\n        );\n      }\n      let query = `manufacturer=${\n        e.target.id === \"All\" ? \"uncheck-brands\" : e.target.id\n      }`;\n      dispatch(setQuery(query));\n    });\n  };\n\n  useDidMountEffect(() => {\n\n    if (productsNumberSelector.status === \"fulfilled\") {\n      setShowSpinner(true);\n      dispatch(\n        getStockByTags({\n          query:querySelector,\n          selected: selected,\n          filteredProductsNum: productsNumberSelector.currentProductNumber,\n        })\n      );\n      setShowSpinner(false);\n    }\n  }, []);\n\n  useDidMountEffect(() => {\n    dispatch(getItems(querySelector));\n    dispatch(getFilteredItemsNumber());\n  }, [selected]);\n\n  return (\n    <>\n      <input\n        onChange={(e) => setSearch(e.target.value)}\n        value={search}\n        type=\"text\"\n        placeholder=\"Search brand\"\n        className=\"search-bar\"\n      />\n      <span className=\"float-spinner\">\n      {showSpinner? <Spinner /> : null}\n      </span>\n      <div key={selectQuery} className=\"filter-body custom-scrollbar\">\n        <>\n\n          {selectBrand.length ? (\n            (searchResults.length ? searchResults : selectBrand).map(\n              (brand, i) =>\n                brand.products ? (\n                  <div className=\"form-group filter-item\" key={i}>\n                    <input\n                      key={selected}\n                      onChange={handleChange}\n                      type=\"checkbox\"\n                      name={brand.brand.name}\n                      // className=\"custom-checkbox\"\n                      data-testid=\"test-brand-filter-checkbox\"\n                      id={brand.brand.slug}\n                      defaultChecked={\n                        selected.includes(brand.brand.slug) ||\n                        selected.includes(brand.brand.name) ||\n                        selectQuery.includes(\"manufacturer=\"+brand.brand.slug)\n                      }\n                    />\n                    <label\n                      className=\"filtering-label text-secondary\"\n                      htmlFor={brand.brand.slug}\n                    >\n                      {brand.brand.name}\n                      <span className=\"text-dark-gray\">\n                        {\" \"}\n                        ({brand.products})\n                      </span>\n                    </label>\n                  </div>\n                ) : null\n            )\n          ) : (\n            <Spinner />\n          )}\n\n        </>\n      </div>\n    </>\n  );\n};\n\nexport default BrandFilter;\n","import React, { useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { setQuery } from \"../../features/querySlice\";\nimport { getItems } from \"../../features/productSlice\";\nimport { getStockByBrands } from \"../../features/allProductsSlice\";\nimport { getFilteredItemsNumber } from \"../../features/filteredProducts\";\nimport useDidMountEffect from \"../../helpers/useDidMountEffect\";\nimport Spinner from \"../main/spinner\";\nconst TagsFilter = () => {\n  const [search, setSearch] = useState(\"\");\n  const [searchResults, setSearchResults] = useState([]);\n  const [selected, setSelected] = useState([\"All\"]);\n  const querySelector = useSelector((state) => state.query.value);\n  const selectTags = useSelector((state) => state.allProducts.stockByTag);\n  const selectSoloTags = useSelector((state) => state.allProducts.tags);\n  const selectBrands = useSelector((state) => state.brand.value);\n  const productsNumberSelector = useSelector((state) => state.filteredProducts);\n  const selectQuery = useSelector((state) => state.query.value);\n  const dispatch = useDispatch();\n\n  const handleChange = (e) => {\n    if (e.target.id === \"All\") {\n      setSelected(\n        selected.includes(\"All\")\n          ? selected.filter((item) => item !== \"All\")\n          : [\"All\"]\n      );\n    } else {\n      let filtered = selected;\n      if (selected.includes(\"All\")) {\n        filtered = selected.filter((item) => item !== \"All\");\n      }\n      setSelected(\n        filtered.includes(e.target.id) ||\n          selectQuery.includes(`tags_like=(?<!\\\\s)\\\\b${e.target.id}\\\\b(?!\\\\s)`)\n          ? filtered.filter((item) => item !== e.target.id)\n          : [...filtered, e.target.id]\n      );\n    }\n    let query = `tags_like=(?<!\\\\s)\\\\b${e.target.id}\\\\b(?!\\\\s)`;\n    dispatch(setQuery(query));\n  };\n\n  useDidMountEffect(() => {\n    if (productsNumberSelector.status === \"fulfilled\") {\n      dispatch(\n        getStockByBrands({\n          query: querySelector,\n          brands: selectBrands,\n          selected: selected,\n          filteredProductsNum: productsNumberSelector.currentProductNumber,\n        })\n      );\n    }\n  }, [productsNumberSelector.currentProductNumber]);\n\n  useDidMountEffect(() => {\n    dispatch(getItems(querySelector));\n    dispatch(getFilteredItemsNumber());\n  }, [selected]);\n\n  useDidMountEffect(() => {\n    let res = selectTags.filter((tag) =>\n      tag.tag.toLocaleLowerCase().includes(search.toLocaleLowerCase())\n    );\n    setSearchResults(res);\n  }, [search]);\n\n  return (\n    <>\n      <input\n        onChange={(e) => setSearch(e.target.value)}\n        value={search}\n        type=\"text\"\n        placeholder=\"Search tag\"\n        className=\"search-bar\"\n      />\n      <div key={selectQuery} className=\"filter-body custom-scrollbar\">\n        {selectSoloTags.length ? (\n          (searchResults.length ? searchResults : selectSoloTags).map(\n            (tag, i) => (\n              // tag.products ? (\n              <div className=\"form-group filter-item\" key={i}>\n                <input\n                  key={selected}\n                  onChange={handleChange}\n                  type=\"checkbox\"\n                  className=\"custom-checkbox\"\n                  name=\"\"\n                  id={tag}\n                  defaultChecked={\n                    selected.includes(tag) ||\n                    selectQuery.includes(`tags_like=(?<!\\\\s)\\\\b${tag}\\\\b(?!\\\\s)`)\n                  }\n                />\n                <label className=\"filtering-label text-secondary\" htmlFor={tag}>\n                  {tag}{\" \"}\n                  {/* <span className=\"text-dark-gray \">({tag.products})</span> */}\n                </label>\n              </div>\n            )\n            // ) : null\n          )\n        ) : (\n          <Spinner />\n        )}\n      </div>\n    </>\n  );\n};\n\nexport default TagsFilter;\n","import React, { useState } from \"react\";\nimport { useDispatch, useSelector} from \"react-redux\";\nimport { getFilteredItemsNumber } from \"../../features/filteredProducts\";\nimport { getItems } from \"../../features/productSlice\";\nimport { setQuery } from \"../../features/querySlice\";\n\nconst Sort = () => {\n  const [checkedOption, setCheckedOption] = useState(\"\");\n  const dispatch = useDispatch();\n  const selectQuery = useSelector(state=>state.query.value)\n  const handleChange = (e) => {\n    setCheckedOption(checkedOption === e.target.id ? \"\" : e.target.id)\n    let query = `_sort=${\n      /price/.test(e.target.id) ? \"price\" : \"added\"\n    }&_order=${/Asc/.test(e.target.id) ? \"asc\" : \"desc\"}`;\n    dispatch(setQuery(query));\n    dispatch(getItems(selectQuery))\n    dispatch(getFilteredItemsNumber())\n    \n    \n  };\n\n  const inputsArray = [\n    {testId:\"sort-radio\", name: \"priceAsc\", label: \"Price low to high\" },\n    {testId:\"sort-radio\", name: \"priceDesc\", label: \"Price high to low\" },\n    {testId:\"sort-radio\", name: \"dateDesc\", label: \"New to old\" },\n    {testId:\"sort-radio\", name: \"dateAsc\", label: \"Old to new\" },\n  ];\n\n  return (\n    <>\n      {inputsArray.map((input, i) => (\n        <div className=\"filter-item\" key={i}>\n          <input\n          defaultChecked={input.name === checkedOption}\n            onClick={handleChange}\n            // onChange={handleChange}\n            id={input.name}\n            type=\"radio\"\n            data-testid=\"test-sort-radio\"\n            value={input.name}\n            className=\"custom-radio\"\n            name=\"sort-radio\"\n          />\n          <label className=\"sorting-label text-secondary\" htmlFor={input.name}>{input.label}</label>\n        </div>\n      ))}\n    </>\n  );\n};\n\nexport default Sort;\n","import React, { useEffect } from \"react\";\nimport BrandFilter from \"./brandFilter\";\nimport TagFilter from \"./tagFilter\";\nimport Sort from \"./sort\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport {\n  getAllItems,\n  getStockByBrands,\n  getStockByTags,\n  getTags,\n} from \"../../features/allProductsSlice\";\nimport { getBrands } from \"../../features/brandSlice\";\nimport useDidMountEffect from \"../../helpers/useDidMountEffect\";\nimport { getFilteredItemsNumber } from \"../../features/filteredProducts\";\n\nconst Options = () => {\n  const dispatch = useDispatch();\n  const selectBrands = useSelector((state) => state.brand);\n  const selectAllProducts = useSelector((state) => state.allProducts);\n\n  useEffect(() => {\n    dispatch(getAllItems());\n    dispatch(getBrands());\n    dispatch(getFilteredItemsNumber())\n  }, []);\n  \n  useDidMountEffect(() => {\n    if (selectAllProducts.status === \"fulfilled\") {\n      dispatch(getTags());\n      //dispatch(getStockByTags({selected:[],filteredProductsNum:selectAllProducts.value.length}));\n    }\n  }, [selectAllProducts.status]);\n\n  useDidMountEffect(() => {\n    if (\n      selectBrands.status === \"fulfilled\" &&\n      selectAllProducts.status === \"fulfilled\"\n    ) {\n      dispatch(getStockByBrands({ brands: selectBrands.value, selected: [],filteredProductsNum:selectAllProducts.value.length }));\n    }\n  }, [selectBrands.status, selectAllProducts.status]);\n\n  return (\n    <>\n      <div className=\"filters\">\n        <span className=\"filters-title\">Sorting</span>\n        <div className=\"filter-container\">\n          <Sort />\n        </div>\n        <span className=\"filters-title\">Brands</span>\n        <div className=\"filter-container\">\n          <BrandFilter />\n        </div>\n        <span className=\"filters-title\">Tags</span>\n        <div className=\"filter-container\">\n          <TagFilter />\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport default Options;\n"],"names":["useState","search","setSearch","searchResults","setSearchResults","selected","setSelected","querySelector","useSelector","state","query","value","selectBrand","allProducts","stockByBrand","productsNumberSelector","filteredProducts","showSpinner","setShowSpinner","selectQuery","dispatch","useDispatch","useTransition","startTransition","useDidMountEffect","res","filter","brand","name","toLocaleLowerCase","includes","handleChange","e","target","item","filtered","id","setQuery","status","getStockByTags","filteredProductsNum","currentProductNumber","getItems","getFilteredItemsNumber","onChange","type","placeholder","className","length","map","i","products","slug","defaultChecked","htmlFor","selectTags","stockByTag","selectSoloTags","tags","selectBrands","getStockByBrands","brands","tag","checkedOption","setCheckedOption","test","testId","label","input","onClick","selectAllProducts","useEffect","getAllItems","getBrands","getTags"],"sourceRoot":""}